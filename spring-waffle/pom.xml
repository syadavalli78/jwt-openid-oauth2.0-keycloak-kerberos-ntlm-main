<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/>
	</parent>
	<groupId>com.sk</groupId>
	<artifactId>waffle-ui-api</artifactId>
	<version>0.1</version>
	<packaging>jar</packaging>
	<name>waffle-ui-api</name>
	<description>User Interface for waffle-ui-api</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Finchley.SR1</spring-cloud.version>	
		<!--
		<node.installDir>C:\sandeep\sandbox\nodejs</node.installDir>
		<node.env>dev</node.env>
		-->
	</properties>

	<dependencies>
	  <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-transports-http</artifactId>
        <version>3.1.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-rs-service-description</artifactId>
        <version>3.1.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-frontend-jaxrs</artifactId>
        <version>3.1.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-rs-client</artifactId>
        <version>3.1.5</version>
      </dependency>
      <dependency>
        <groupId>javax.ws.rs</groupId>
        <artifactId>javax.ws.rs-api</artifactId>
        <version>2.0.1</version>
      </dependency>
	<dependency>
    	<groupId>org.springframework.security</groupId>
    	<artifactId>spring-security-config</artifactId>
    	<version>4.2.4.RELEASE</version>
	</dependency>
      <dependency>
    		<groupId>net.java.dev.jna</groupId>
    		<artifactId>jna-platform</artifactId>
    		<version>4.0.0</version>
		</dependency>
		<dependency>
		    <groupId>com.github.waffle</groupId>
		    <artifactId>waffle-spring-security4</artifactId>
		    <version>1.8.3</version>
		</dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
      </dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
      </dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
      </dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
      </dependency>
  	  <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
	  </dependency>
 	  <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-discovery</artifactId>
  	  </dependency>  
	  <dependency>
			<groupId>org.json</groupId>
			<artifactId>org.json</artifactId>
			<version>chargebee-1.0</version>
	   </dependency>
	   <dependency>
	   		<groupId>com.h2database</groupId>
	   		<artifactId>h2</artifactId>
	   		<scope>runtime</scope>
	   </dependency>
	   <dependency>
	   		<groupId>io.springfox</groupId>
	   		<artifactId>springfox-swagger2</artifactId>
	   		<version>2.8.0</version>
	   </dependency>
	   <dependency>
	   		<groupId>io.springfox</groupId>
	   		<artifactId>springfox-swagger-ui</artifactId>
	   		<version>2.8.0</version>
	   </dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-validator</artifactId>
		    <version>7.0.1.Final</version>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement> 

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!--
			<plugin>
				<groupId>com.github.eirslett</groupId>	
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.3</version>
				<configuration>
                    <installDirectory>${node.installDir}</installDirectory>
                    <workingDirectory>src/main/frontend</workingDirectory>
                </configuration>
				<executions>
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>npm run build</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
							<arguments>run ${node.env}</arguments>
                        </configuration>
                    </execution>
                </executions>
			</plugin>
			-->
			<plugin>
			  <groupId>io.github.michaldo</groupId>
			  <artifactId>nashorn-maven-plugin</artifactId>
			  <version>0.0.2</version>
			  <executions>
			    <execution>
			      <phase>process-resources</phase>
			      <goals>
			        <goal>eval</goal>
			      </goals>
			      <configuration>
			        <script>
			        	var LocalDateTime = Java.type('java.time.LocalDateTime');
			        	var now = LocalDateTime.now();
			        	var version = "${project.version}";
						var buildNumber = now.getYear() + "_" + now.getMonthValue() + "_" + now.getDayOfMonth() + "_" + now.getHour() + "_" + now.getMinute() + "_" + now.getSecond() + "-1";
						var versionLine = "public static final String VERSION = \"" + version + "\";";
						var buildLine = "public static final String BUILD = \"" + buildNumber + "\";";
						var path = java.nio.file.Paths.get($basedir + "/src/main/java/com/sk/constants", 'BuildConstants.java');
						var Files = Java.type('java.nio.file.Files');
						var String = Java.type("java.lang.String");
						var StandardOpenOption = Java.type("java.nio.file.StandardOpenOption");
						var data = new String(Files.readAllBytes(path));
						data = data.replaceAll("public static final String VERSION = (.+?);", versionLine);
						data = data.replaceAll("public static final String BUILD = (.+?);", buildLine);
						Files.deleteIfExists(path);
						Files.write(path, data.getBytes(), StandardOpenOption.CREATE);
			        </script>
			      </configuration>
			    </execution>
			  </executions>
			</plugin>    			
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											io.github.michaldo
										</groupId>
										<artifactId>
											nashorn-maven-plugin
										</artifactId>
										<versionRange>
											[0.0.2,)
										</versionRange>
										<goals>
											<goal>eval</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
