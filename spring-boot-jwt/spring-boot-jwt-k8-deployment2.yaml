apiVersion: v1
kind: Service
metadata:
  labels:
    app: spring-boot-jwt
  name: spring-boot-jwt
spec:
  ports:
  - protocol: TCP
    name: "80"
    port: 80
    targetPort: 80
  selector:
    app: spring-boot-jwt
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: spring-boot-jwt
  name: spring-boot-jwt
spec:
  selector:
    matchLabels:
      app: spring-boot-jwt
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: spring-boot-jwt
    spec:
      initContainers:
      - name: init-container
        image: localhost:5000/alpine-jre-8:latest
        command: ["java", "-version"]
      containers:
      - name: spring-boot-jwt
        image: localhost:5000/spring/spring-boot-jwt:latest
        #lifecycle:
        #  postStart:
        #    exec:
        #      #command: ["curl", "-X", "POST", "http://192.168.1.101:5050/", "-d", "started"]
        #      command: 
        #      - /bin/sh
        #      - "-c"
        #      - |
        #        export currenttime=$(date) && export machinename=$(hostname) && curl -X POST http://192.168.1.101:5050/ -d "action=MS StartUp, time=$currenttime, host=$machinename"
        #  preStop:
        #    exec:
        #      #command: ["curl", "-X", "POST", "http://192.168.1.101:5050/", "-d", "stopped"]
        #      command: 
        #      - /bin/sh
        #      - "-c"
        #      - |
        #        export currenttime=$(date) && export machinename=$(hostname) && curl -X POST http://192.168.1.101:5050/ -d "action=MS Stopped, time=$currenttime, host=$machinename"
        command: ["java"]
        args: ["-Xmx128m", "-Xss1m", "-jar", "-Dconsole.level=INFO", "/opt/lib/spring-boot-jwt.jar"]

        livenessProbe:
          httpGet:
            path: /app/actuator
            port: 80
            httpHeaders:
            - name: Content-Type
              value: plain/text
          failureThreshold: 10
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
        #  exec:
        #    command:
        #    - cat
        #    - /tmp/healthy
        #  initialDelaySeconds: 5
        #  periodSeconds: 5
          httpGet:
            path: /app/actuator
            port: 80
          failureThreshold: 10
          initialDelaySeconds: 10
          periodSeconds: 10
        startupProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10

        imagePullPolicy: "Always"
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "1"
            memory: "1073741824"
          requests:
            cpu: 250m
            memory: "536870912"
      restartPolicy: Always
status: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-jwt-ingress
  annotations:
    #kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: www.mybank.com
    http:
      paths:
      - path: /app
        pathType: Prefix
        backend:
          service:
            name: spring-boot-jwt
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spring-node-angular-jwt
            port:
              number: 80
  - http:
      paths:
      - path: /app
        pathType: Prefix
        backend:
          service:
            name: spring-boot-jwt
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spring-node-angular-jwt
            port:
              number: 80

